# SW360 Data Model

${docNameCap} is capable of interacting with your instance of [SW360](https://www.eclipse.org/sw360/).

Not all data that is represented in SW360 is captured and mapped by ${docNameCap}. 
In the following section there is an outline what data of SW360 ${docNameCap} maps.

#[[###]]# Projects
 When the workflow steps of ${docNameCap} are run they create a SW360 project that is the current executed project.
 The coordinates of this project can be set in the [`config.xml`](config-configuration.html).
 
  | Variable Name         | Meaning                       |
  |-----------------------|-------------------------------|
  | Type | the name of the component |
  | Name | the name of the project |
  | Version | Current version of the project |
  | Project Type | What type of project. E.g. "Product" |
  | Description | Description of the project. E.g what it does and who is responsible for it. |
  | Created On| Date of creation in SW360 instance |
  | Business Unit | Business Unit |
  | Clearing Team | Clearing Team |
  | Visibility | Which roles can see the project |
  | ReleaseIDToUsage | The release ID to the project usage |
  | External Ids | Additional information can be put here in a `Map<String,String>` format |

#[[###]]# Licenses
 All licenses are stored separately from the components and releases.
 Enriching of license information is done as part of the enriching process. Updating is not done actively, since
 license data is sensitive and therefore has to be provided by compliance experts

  | Variable Name         | Meaning                       |
  |-----------------------|-------------------------------|
  | Text | The text of the license |
  | Short Name | The short name of the license. E.g. `Apache-2.0`, if possible the SPDX identifier |
  | Full Name | The full, long name of the license. E.g. `Apache Software License 2.0` |
 
#[[###]]# Components
 One component is an individual component with no version.
 The individual versions of a component are called "releases" and are saved as a different object.
 Each component has a list of its releases.

 | Variable Name         | Meaning                       |
 |-----------------------|-------------------------------|
 | Name | the name of the component E.g. Junit:Junit stored in the `Name` field. |
 | Component Type| Can be `Internal`, meaning it is proprietary, or `OSS`, meaning it is open source. |
 | Created On| Date of creation in SW360 instance |
 | Homepage| Link to the homepage of the OSS Component stored in the `Homepage` field. |
 
#[[###]]# Releases
 An individual release is a release of a component, meaning it always has a version and always has a component it belongs to.
 All known license and copyright information can be found here.

  | Variable Name         | Meaning                       |
  |-----------------------|-------------------------------|
  | Component ID | ID of the component this release belongs to. E.g. The ID of the Junit component. |
  | Name | Name of the release, which should equal the component name stored in the `Name` field. |
  | Version | Version of the release stored in the `Version` field. |
  | Download Url | Local link to the source archive stored in the `Download URL` field. I.e., the link to the local storage where the sources of the release are stored. |
  | Main License IDs | IDs of the final licenses in the `Main License Ids` field. The IDs have been extracted from the license information below and link to licenses in the License database. |
  | Purls | These are the corresponding release coordinates that are saved under an external ID as purls. It is a list of key-value pairs of Strings, with the purl type as key, e.g., `maven`, and the purl as value. There can be multiple coordinates. |
  | Overwritten License | The manually defined license of the release in a SPDX license expression represented as String in the additional data with `overwritten_license` as key. |
  | Declared License | The declared licenses of the release in a SPDX license expression represented as String in the additional data with `declared_license` as key. |
  | Observed License | The obsserved licenses of the release in a SPDX license expression  represented as String in the additional data with `observed_license` as key. |
  | Release Tag Url | This is a link to the OSS repos tag of the release used stored as external id with key `orig_repo`. |
  | Software Heritage ID | A release ID in software heritage in the format "swh:1:rel:*", stored as external id with key `swh`. |
  | Copyrights | Copyrights of the release, given in a String. Individual copyrights are separated by line. Stored in the additional data section with key `copyrights` |
  | Change Status | An enumeration with values `changed` or `as-is` stored as additional data with key `change_status`. A changed component release should be stored as own release with an appendix to the original version, e.g. `1.2.3_modified_xyz`. Currently the implementation can only handle `as-is` components. |

#[[###]]## Used Attachments
 Attachments are used to store additional elements in files, like sources and known binaries.

  | Attachment Type       | Meaning                       |
  |-----------------------|-------------------------------|
  | Source File | A zipped folder with the sources of the component. Typically uploaded by the SW360 Uploader |
  | Binary | A known binary of the component, stores also e.g. the hash that can be used to search for the metadata based on a hash. Typically uploaded by the SW360 Uploader |
  | Clearing Report | A file with curated data and the approval state. If the status of this attachment is `Accepted`, the Clearing State of the component release is `Approved`. Typically uploaded by compliance office tooling. |